using System.Collections;
using System.Collections.Generic;
using UnityEngine;


/* BY: ALIN, Pontus Ã…hlin
this script has a function called GenerateMessage which returns one [1] string containing a thing that
our chat would be saying at this point in time, based on some numbers corresponding to what the player
is doing right now.

ideally GenerateMessage should be called at different speeds, faster for when the monster is around
and much slower when nothing is happening

*/
public class ChatGeneration : MonoBehaviour
{
    [Tooltip("this is the chance that a regular message will be generated by GenerateMessage()")]
    public float RegularChance = 0.5f;
    [Tooltip("this is the chance that a scared/excited message will be generated by GenerateMessage()")]
    public float MonsterChance = 0.25f;
    [Tooltip("this is the chance that a monster request will be generated by GenerateMessage()")]
    public float RequestChance = 0.25f;
    [Tooltip("this is the monster GameObject whose EXACT NAME IN UNITY will be requested")]
    public GameObject MonsterObject;
    List<string> RegularMessages = new List<string>
    {
        "This guy sucks",
        "hi is this the cooking stream",
        "can u do something cool",
        "hi",
        "can u wipe the camera lens",
        "how does it smell there",
        "ASYLUM",
        "kappa",
        "ill donate 50 ectoplasm if you scream at the top of your lungs rn",
        "I hope you're doing okay in there!!!!"
    };
    List<string> MonsterMessages = new List<string>
    {
        "WHAT IS THAT",
        "RUN!!!",
        "poke it",
        "you can clearly see its fake...",
        "pls dont die",
        "GHOSTLEAKS IS THE BEST HAHA",
        "IS HE GHONNA DIE",
        "RUN RUN RUN",
        "KEEP FILMING IT",
        "FINALLY SOMETHING GOOD"
    };
    List<string> RequestMessages = new List<string>
    {
        "I wanna see the ",
        "ill donate if u show the ",
        "FIND THE ",
        "im bored...want ",
        "where is the ",
        "WE WANT ",
        "i want the ",
        "i dont care if u die, film the "
    };


    /*  The messages are sorted into three categories: Positive, Negative and request. 
        The negative comments will be shown when no monster is seen for a while/low viewers.
        The positive comments will be shown when you record a monster and have higher viewers.
        The request comments will be shown when the viewers wants to see a before seen monster. 
    */
    public string GenerateMessage(string MessageType)
    {
        string message = null;

        float pickedMessagePointer = UnityEngine.Random.value;

        /*
        HOW THIS WORKS:
        so we have two chances in play rn, request & monster chance
        request chance is the chance the message will be a request message (ex: 0.20f)
        monster chance is the chance the message will be a scared message (ex: 0.30f)
        then we pick a number between 0 and 1.00f

        monsterchance has priority and requests have lower priority, so if monster chance is 1.0f, and request is 0.2f
        it'll always be a monster message

        so if the number is 
        under 0.20f, monster spook message
        under 0.20f+0.30f, we get a request
        if it's over 0.20f+0.30f, we get a regular random chat message
        */

        /*
        if (pickedMessagePointer < MonsterChance)
            message = MonsterMessages[UnityEngine.Random.Range(0,MonsterMessages.Count)];
        else if (pickedMessagePointer < (MonsterChance + RequestChance))
            message = RequestMessages[UnityEngine.Random.Range(0,RequestMessages.Count)];
        else 
            message = RegularMessages[UnityEngine.Random.Range(0,RegularMessages.Count)];
        */


        switch(MessageType){

            case "Positive":
                message = MonsterMessages[UnityEngine.Random.Range(0,MonsterMessages.Count)];
                break;    

            case "Negative":
                message = RegularMessages[UnityEngine.Random.Range(0,RegularMessages.Count)];
                break;

            case "Request":
                message = RequestMessages[UnityEngine.Random.Range(0,RequestMessages.Count)];
                break;
        }

        return message;
    }
}
